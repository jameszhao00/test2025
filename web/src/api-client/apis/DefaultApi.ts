/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTodo,
  HTTPValidationError,
  Todo,
} from '../models/index';
import {
    CreateTodoFromJSON,
    CreateTodoToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    TodoFromJSON,
    TodoToJSON,
} from '../models/index';

export interface CreateTodoApiTodosPostRequest {
    createTodo: CreateTodo;
}

export interface DeleteTodoApiTodosTodoIdDeleteRequest {
    todoId: number;
}

export interface ServeVueAppFullPathGetRequest {
    fullPath: string;
}

export interface ToggleTodoDoneApiTodosTodoIdTogglePutRequest {
    todoId: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create Todo
     */
    async createTodoApiTodosPostRaw(requestParameters: CreateTodoApiTodosPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Todo>> {
        if (requestParameters['createTodo'] == null) {
            throw new runtime.RequiredError(
                'createTodo',
                'Required parameter "createTodo" was null or undefined when calling createTodoApiTodosPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/todos`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTodoToJSON(requestParameters['createTodo']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TodoFromJSON(jsonValue));
    }

    /**
     * Create Todo
     */
    async createTodoApiTodosPost(requestParameters: CreateTodoApiTodosPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Todo> {
        const response = await this.createTodoApiTodosPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Todo
     */
    async deleteTodoApiTodosTodoIdDeleteRaw(requestParameters: DeleteTodoApiTodosTodoIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['todoId'] == null) {
            throw new runtime.RequiredError(
                'todoId',
                'Required parameter "todoId" was null or undefined when calling deleteTodoApiTodosTodoIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/todos/{todo_id}`.replace(`{${"todo_id"}}`, encodeURIComponent(String(requestParameters['todoId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Todo
     */
    async deleteTodoApiTodosTodoIdDelete(requestParameters: DeleteTodoApiTodosTodoIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTodoApiTodosTodoIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get Todos
     */
    async getTodosApiTodosGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Todo>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/todos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TodoFromJSON));
    }

    /**
     * Get Todos
     */
    async getTodosApiTodosGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Todo>> {
        const response = await this.getTodosApiTodosGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Hello
     */
    async helloApiHelloGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/hello`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Hello
     */
    async helloApiHelloGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.helloApiHelloGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Serve Index
     */
    async serveIndexGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Serve Index
     */
    async serveIndexGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.serveIndexGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Serve Vue App
     */
    async serveVueAppFullPathGetRaw(requestParameters: ServeVueAppFullPathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['fullPath'] == null) {
            throw new runtime.RequiredError(
                'fullPath',
                'Required parameter "fullPath" was null or undefined when calling serveVueAppFullPathGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{full_path}`.replace(`{${"full_path"}}`, encodeURIComponent(String(requestParameters['fullPath']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Serve Vue App
     */
    async serveVueAppFullPathGet(requestParameters: ServeVueAppFullPathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.serveVueAppFullPathGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Toggle Todo Done
     */
    async toggleTodoDoneApiTodosTodoIdTogglePutRaw(requestParameters: ToggleTodoDoneApiTodosTodoIdTogglePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Todo>> {
        if (requestParameters['todoId'] == null) {
            throw new runtime.RequiredError(
                'todoId',
                'Required parameter "todoId" was null or undefined when calling toggleTodoDoneApiTodosTodoIdTogglePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/todos/{todo_id}/toggle`.replace(`{${"todo_id"}}`, encodeURIComponent(String(requestParameters['todoId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TodoFromJSON(jsonValue));
    }

    /**
     * Toggle Todo Done
     */
    async toggleTodoDoneApiTodosTodoIdTogglePut(requestParameters: ToggleTodoDoneApiTodosTodoIdTogglePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Todo> {
        const response = await this.toggleTodoDoneApiTodosTodoIdTogglePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
