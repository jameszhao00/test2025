/* tslint:disable */
/* eslint-disable */
/**
 * Session-Based Chatty LLM API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Represents a single message in the chat.
 * @export
 * @interface ChatMessage
 */
export interface ChatMessage {
    /**
     * 
     * @type {number}
     * @memberof ChatMessage
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ChatMessage
     */
    sessionId: string;
    /**
     * 
     * @type {string}
     * @memberof ChatMessage
     */
    role: ChatMessageRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof ChatMessage
     */
    content: string;
}


/**
 * @export
 */
export const ChatMessageRoleEnum = {
    User: 'user',
    Assistant: 'assistant'
} as const;
export type ChatMessageRoleEnum = typeof ChatMessageRoleEnum[keyof typeof ChatMessageRoleEnum];


/**
 * Check if a given object implements the ChatMessage interface.
 */
export function instanceOfChatMessage(value: object): value is ChatMessage {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('sessionId' in value) || value['sessionId'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    return true;
}

export function ChatMessageFromJSON(json: any): ChatMessage {
    return ChatMessageFromJSONTyped(json, false);
}

export function ChatMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChatMessage {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'sessionId': json['session_id'],
        'role': json['role'],
        'content': json['content'],
    };
}

export function ChatMessageToJSON(json: any): ChatMessage {
    return ChatMessageToJSONTyped(json, false);
}

export function ChatMessageToJSONTyped(value?: ChatMessage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'session_id': value['sessionId'],
        'role': value['role'],
        'content': value['content'],
    };
}

